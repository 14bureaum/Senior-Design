'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UnsupportedTypeError = require('../errors/unsupported-type-error');

var TypeRegistry = function () {
  function TypeRegistry() {
    _classCallCheck(this, TypeRegistry);
  }

  _createClass(TypeRegistry, null, [{
    key: 'findByTypeId',

    /**
     * Determine fulfillment implementation class from a type ID.
     *
     * Returns the class implementing a fulfillment type that matches a certain
     * type ID.
     *
     * @param {Number} type Type ID.
     * @return {Class} Class implementing the given fulfillment type ID.
     */
    value: function findByTypeId(typeId) {
      // Determine type of condition
      if (typeId > Number.MAX_SAFE_INTEGER) {
        throw new UnsupportedTypeError('Type ' + typeId + ' is not supported');
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = TypeRegistry.registeredTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var type = _step.value;

          if (typeId === type.typeId) return type;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      throw new UnsupportedTypeError('Type ' + typeId + ' is not supported');
    }
  }, {
    key: 'findByName',
    value: function findByName(name) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = TypeRegistry.registeredTypes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var type = _step2.value;

          if (name === type.name) return type;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      throw new UnsupportedTypeError('Type ' + name + ' is not supported');
    }
  }, {
    key: 'findByAsn1ConditionType',
    value: function findByAsn1ConditionType(asn1Type) {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = TypeRegistry.registeredTypes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var type = _step3.value;

          if (asn1Type === type.asn1Condition) return type;
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      throw new UnsupportedTypeError('Type ' + asn1Type + ' is not supported');
    }
  }, {
    key: 'findByAsn1FulfillmentType',
    value: function findByAsn1FulfillmentType(asn1Type) {
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = TypeRegistry.registeredTypes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var type = _step4.value;

          if (asn1Type === type.asn1Fulfillment) return type;
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      throw new UnsupportedTypeError('Type ' + asn1Type + ' is not supported');
    }

    /**
     * Add a new fulfillment type.
     *
     * This can be used to extend this cryptocondition implementation with new
     * fulfillment types that it does not yet support. But mostly it is used
     * internally to register the built-in types.
     *
     * In this method, we expect a regular fulfillment type, for information on
     * registering meta types please see `registerMetaType`.
     *
     * @param {Class} Class Implementation of a fulfillment type.
     */

  }, {
    key: 'registerType',
    value: function registerType(Class) {
      // TODO Do some sanity checks on Class

      TypeRegistry.registeredTypes.push({
        typeId: Class.TYPE_ID,
        name: Class.TYPE_NAME,
        asn1Condition: Class.TYPE_ASN1_CONDITION,
        asn1Fulfillment: Class.TYPE_ASN1_FULFILLMENT,
        Class: Class
      });
    }
  }]);

  return TypeRegistry;
}();

TypeRegistry.registeredTypes = [];

module.exports = TypeRegistry;