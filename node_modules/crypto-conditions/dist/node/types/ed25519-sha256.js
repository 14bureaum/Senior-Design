'use strict';

/**
 * @module types
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var nacl = require('tweetnacl');
var BaseSha256 = require('./base-sha256');
var MissingDataError = require('../errors/missing-data-error');
var ValidationError = require('../errors/validation-error');
var Asn1Ed25519FingerprintContents = require('../schemas/fingerprint').Ed25519FingerprintContents;

var ed25519 = void 0;
try {
  ed25519 = require('ed25519');
} catch (err) {}

/**
 * ED25519: Ed25519 signature condition.
 *
 * This condition implements Ed25519 signatures.
 *
 * ED25519 is assigned the type ID 4. It relies only on the ED25519 feature
 * suite which corresponds to a bitmask of 0x20.
 */

var Ed25519Sha256 = function (_BaseSha) {
  _inherits(Ed25519Sha256, _BaseSha);

  function Ed25519Sha256() {
    _classCallCheck(this, Ed25519Sha256);

    var _this = _possibleConstructorReturn(this, (Ed25519Sha256.__proto__ || Object.getPrototypeOf(Ed25519Sha256)).call(this));

    _this.publicKey = null;
    _this.signature = null;
    return _this;
  }

  /**
   * Set the public publicKey.
   *
   * This is the Ed25519 public key. It has to be provided as a buffer.
   *
   * @param {Buffer} publicKey Public Ed25519 publicKey
   */


  _createClass(Ed25519Sha256, [{
    key: 'setPublicKey',
    value: function setPublicKey(publicKey) {
      if (!Buffer.isBuffer(publicKey)) {
        throw new TypeError('Public key must be a Buffer, was: ' + publicKey);
      }

      if (publicKey.length !== 32) {
        throw new Error('Public key must be 32 bytes, was: ' + publicKey.length);
      }

      // TODO Validate public key

      this.publicKey = publicKey;
    }

    /**
     * Set the signature.
     *
     * Instead of using the private key to sign using the sign() method, we can
     * also generate the signature elsewhere and pass it in.
     *
     * @param {Buffer} signature 64-byte signature.
     */

  }, {
    key: 'setSignature',
    value: function setSignature(signature) {
      if (!Buffer.isBuffer(signature)) {
        throw new TypeError('Signature must be a Buffer, was: ' + signature);
      }

      if (signature.length !== 64) {
        throw new Error('Signature must be 64 bytes, was: ' + signature.length);
      }

      this.signature = signature;
    }

    /**
     * Sign a message.
     *
     * This method will take a message and an Ed25519 private key and store a
     * corresponding signature in this fulfillment.
     *
     * @param {Buffer} message Message to sign.
     * @param {String} privateKey Ed25519 private key.
     */

  }, {
    key: 'sign',
    value: function sign(message, privateKey) {
      if (!Buffer.isBuffer(message)) {
        throw new MissingDataError('Message must be a Buffer');
      }
      if (!Buffer.isBuffer(privateKey)) {
        throw new TypeError('Private key must be a Buffer, was: ' + privateKey);
      }
      if (privateKey.length !== 32) {
        throw new Error('Private key must be 32 bytes, was: ' + privateKey.length);
      }

      // This would be the Ed25519ph version:
      // message = crypto.createHash('sha512')
      //   .update(message)
      //   .digest()

      // Use native library if available (~65x faster)
      if (ed25519) {
        var keyPair = ed25519.MakeKeypair(privateKey);
        this.setPublicKey(keyPair.publicKey);
        this.signature = ed25519.Sign(message, keyPair);
      } else {
        var _keyPair = nacl.sign.keyPair.fromSeed(privateKey);
        this.setPublicKey(Buffer.from(_keyPair.publicKey));
        this.signature = Buffer.from(nacl.sign.detached(message, _keyPair.secretKey));
      }
    }
  }, {
    key: 'parseJson',
    value: function parseJson(json) {
      this.setPublicKey(Buffer.from(json.publicKey, 'base64'));
      this.setSignature(Buffer.from(json.signature, 'base64'));
    }

    /**
     * Produce the contents of the condition hash.
     *
     * This function is called internally by the `getCondition` method.
     *
     * @return {Buffer} Encoded contents of fingerprint hash.
     *
     * @private
     */

  }, {
    key: 'getFingerprintContents',
    value: function getFingerprintContents() {
      if (!this.publicKey) {
        throw new MissingDataError('Requires public key');
      }

      return Asn1Ed25519FingerprintContents.encode({
        publicKey: this.publicKey
      });
    }
  }, {
    key: 'getAsn1JsonPayload',
    value: function getAsn1JsonPayload() {
      return {
        publicKey: this.publicKey,
        signature: this.signature
      };
    }

    /**
     * Calculate the cost of fulfilling this condition.
     *
     * The cost of the Ed25519 condition is 2^17 = 131072.
     *
     * @return {Number} Expected maximum cost to fulfill this condition
     * @private
     */

  }, {
    key: 'calculateCost',
    value: function calculateCost() {
      return Ed25519Sha256.CONSTANT_COST;
    }

    /**
     * Verify the signature of this Ed25519 fulfillment.
     *
     * The signature of this Ed25519 fulfillment is verified against the provided
     * message and public key.
     *
     * @param {Buffer} message Message to validate against.
     * @return {Boolean} Whether this fulfillment is valid.
     */

  }, {
    key: 'validate',
    value: function validate(message) {
      if (!Buffer.isBuffer(message)) {
        throw new TypeError('Message must be a Buffer');
      }

      // Use native library if available (~60x faster)
      var result = void 0;
      if (ed25519) {
        result = ed25519.Verify(message, this.signature, this.publicKey);
      } else {
        result = nacl.sign.detached.verify(message, this.signature, this.publicKey);
      }

      if (result !== true) {
        throw new ValidationError('Invalid ed25519 signature');
      }

      return true;
    }
  }]);

  return Ed25519Sha256;
}(BaseSha256);

Ed25519Sha256.TYPE_ID = 4;
Ed25519Sha256.TYPE_NAME = 'ed25519-sha-256';
Ed25519Sha256.TYPE_ASN1_CONDITION = 'ed25519Sha256Condition';
Ed25519Sha256.TYPE_ASN1_FULFILLMENT = 'ed25519Sha256Fulfillment';
Ed25519Sha256.TYPE_CATEGORY = 'simple';

Ed25519Sha256.CONSTANT_COST = 131072;

module.exports = Ed25519Sha256;