'use strict';

/**
 * @module types
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rsa = require('../crypto/rsa');
var pem = require('../util/pem');
var BaseSha256 = require('./base-sha256');
var MissingDataError = require('../errors/missing-data-error');
var ValidationError = require('../errors/validation-error');
var Asn1RsaFingerprintContents = require('../schemas/fingerprint').RsaFingerprintContents;

// Instantiate RSA signer with standard settings
var rsa = new Rsa();

/**
 * RSA-SHA-256: RSA signature condition using SHA-256.
 *
 * This RSA condition uses RSA-PSS padding with SHA-256. The salt length is set
 * equal the digest length of 32 bytes.
 *
 * The public exponent is fixed at 65537 and the public modulus must be between
 * 128 (1017 bits) and 512 bytes (4096 bits) long.
 *
 * RSA-SHA-256 is assigned the type ID 3. It relies on the SHA-256 and RSA-PSS
 * feature suites which corresponds to a feature bitmask of 0x11.
 */

var RsaSha256 = function (_BaseSha) {
  _inherits(RsaSha256, _BaseSha);

  function RsaSha256() {
    _classCallCheck(this, RsaSha256);

    var _this = _possibleConstructorReturn(this, (RsaSha256.__proto__ || Object.getPrototypeOf(RsaSha256)).call(this));

    _this.modulus = null;
    _this.signature = null;
    return _this;
  }

  _createClass(RsaSha256, [{
    key: 'parseJson',
    value: function parseJson(json) {
      this.modulus = Buffer.from(json.modulus, 'base64');
      this.signature = Buffer.from(json.signature, 'base64');
    }

    /**
     * Produce the contents of the condition hash.
     *
     * This function is called internally by the `getCondition` method.
     *
     * @return {Buffer} Encoded contents of fingerprint hash.
     *
     * @private
     */

  }, {
    key: 'getFingerprintContents',
    value: function getFingerprintContents() {
      if (!this.modulus) {
        throw new MissingDataError('Requires modulus');
      }

      return Asn1RsaFingerprintContents.encode({
        modulus: this.modulus
      });
    }
  }, {
    key: 'getAsn1JsonPayload',
    value: function getAsn1JsonPayload() {
      return {
        modulus: this.modulus,
        signature: this.signature
      };
    }

    /**
     * Set the public modulus.
     *
     * This is the modulus of the RSA public key. It has to be provided as a raw
     * buffer with no leading zeros.
     *
     * @param {Buffer} modulus Public RSA modulus
     */

  }, {
    key: 'setPublicModulus',
    value: function setPublicModulus(modulus) {
      if (!Buffer.isBuffer(modulus)) {
        throw new TypeError('Modulus must be a buffer, was: ' + modulus);
      }

      if (modulus[0] === 0) {
        throw new Error('Modulus may not contain leading zeros');
      }

      if (modulus.length > 512 || modulus.length < 128) {
        throw new Error('Modulus must be between 128 bytes (1017 bits) and ' + '512 bytes (4096 bits), was: ' + modulus.length + ' bytes');
      }

      this.modulus = modulus;
    }

    /**
     * Set the signature manually.
     *
     * The signature must be a valid RSA-PSS siganture.
     *
     * @param {Buffer} signature RSA signature.
     */

  }, {
    key: 'setSignature',
    value: function setSignature(signature) {
      if (!Buffer.isBuffer(signature)) {
        throw new TypeError('Signature must be a buffer, was: ' + signature);
      }

      this.signature = signature;
    }

    /**
     * Sign the message.
     *
     * This method will take the provided message and create a signature using the
     * provided RSA private key. The resulting signature is stored in the
     * fulfillment.
     *
     * The key should be provided as a PEM encoded private key string.
     *
     * The message is padded using RSA-PSS with SHA256.
     *
     * @param {Buffer} message Message to sign.
     * @param {String} privateKey RSA private key
     */

  }, {
    key: 'sign',
    value: function sign(message, privateKey) {
      if (!this.modulus) {
        this.setPublicModulus(pem.modulusFromPrivateKey(privateKey));
      }
      this.signature = rsa.sign(privateKey, message);
    }

    /**
     * Calculate the cost of fulfilling this condition.
     *
     * The cost of the RSA condition is the size of the modulus squared, divided
     * by 64.
     *
     * @return {Number} Expected maximum cost to fulfill this condition
     * @private
     */

  }, {
    key: 'calculateCost',
    value: function calculateCost() {
      if (!this.modulus) {
        throw new MissingDataError('Requires a public modulus');
      }

      return Math.pow(rsa.getModulusBitLength(this.modulus), 2) >>> RsaSha256.COST_RIGHT_SHIFT;
    }

    /**
     * Verify the signature of this RSA fulfillment.
     *
     * The signature of this RSA fulfillment is verified against the provided
     * message and the condition's public modulus.
     *
     * @param {Buffer} message Message to verify.
     * @return {Boolean} Whether this fulfillment is valid.
     */

  }, {
    key: 'validate',
    value: function validate(message) {
      if (!Buffer.isBuffer(message)) {
        throw new Error('Message must be provided as a Buffer, was: ' + message);
      }

      var pssResult = rsa.verify(this.modulus, message, this.signature);

      if (!pssResult) {
        throw new ValidationError('Invalid RSA signature');
      }

      return true;
    }
  }]);

  return RsaSha256;
}(BaseSha256);

RsaSha256.TYPE_ID = 3;
RsaSha256.TYPE_NAME = 'rsa-sha-256';
RsaSha256.TYPE_ASN1_CONDITION = 'rsaSha256Condition';
RsaSha256.TYPE_ASN1_FULFILLMENT = 'rsaSha256Fulfillment';
RsaSha256.TYPE_CATEGORY = 'simple';

RsaSha256.COST_RIGHT_SHIFT = 6; // 2^6 = 64

module.exports = RsaSha256;