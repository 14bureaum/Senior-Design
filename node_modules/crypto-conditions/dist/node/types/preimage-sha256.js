'use strict';

/**
 * @module types
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseSha256 = require('./base-sha256');
var MissingDataError = require('../errors/missing-data-error');

/**
 * PREIMAGE-SHA-256: Hashlock condition using SHA-256.
 *
 * This type of condition is also called a hashlock. By creating a hash
 * of a difficult-to-guess 256-bit random or pseudo-random integer it
 * is possible to create a condition which the creator can trivially
 * fulfill by publishing the random value. However, for anyone else,
 * the condition is cryptgraphically hard to fulfill, because they
 * would have to find a preimage for the given condition hash.
 *
 * PREIMAGE-SHA-256 is assigned the type ID 0. It relies on the SHA-256
 * and PREIMAGE feature suites which corresponds to a feature bitmask
 * of 0x03.
 */

var PreimageSha256 = function (_BaseSha) {
  _inherits(PreimageSha256, _BaseSha);

  function PreimageSha256() {
    _classCallCheck(this, PreimageSha256);

    return _possibleConstructorReturn(this, (PreimageSha256.__proto__ || Object.getPrototypeOf(PreimageSha256)).apply(this, arguments));
  }

  _createClass(PreimageSha256, [{
    key: 'getFingerprintContents',

    /**
     * Generate the contents of the condition hash.
     *
     * @return {Buffer} Hash payload.
     *
     * @private
     */
    value: function getFingerprintContents() {
      if (!this.preimage) {
        throw new MissingDataError('Could not calculate hash, no preimage provided');
      }

      return this.preimage;
    }

    /**
     * Provide a preimage.
     *
     * The preimage is the only input to a SHA256 hashlock condition.
     *
     * Note that the preimage should contain enough (pseudo-random) data in order
     * to be difficult to guess. A sufficiently large secret seed and a
     * cryptographically secure pseudo-random number generator (CSPRNG) can be
     * used to avoid having to store each individual preimage.
     *
     * @param {Buffer} preimage Secret data that will be hashed to form the condition.
     */

  }, {
    key: 'setPreimage',
    value: function setPreimage(preimage) {
      if (!Buffer.isBuffer(preimage)) {
        throw new TypeError('Preimage must be a buffer, was: ' + preimage);
      }

      this.preimage = preimage;
    }
  }, {
    key: 'parseJson',
    value: function parseJson(json) {
      this.preimage = Buffer.from(json.preimage, 'base64');
    }
  }, {
    key: 'getAsn1JsonPayload',
    value: function getAsn1JsonPayload() {
      return {
        preimage: this.preimage
      };
    }

    /**
     * Calculate the cost of fulfilling this condition.
     *
     * The cost of the preimage condition equals the size of the preimage in
     * bytes.
     *
     * @return {Number} Expected maximum cost to fulfill this condition
     * @private
     */

  }, {
    key: 'calculateCost',
    value: function calculateCost() {
      if (!this.preimage) {
        throw new MissingDataError('Preimage must be specified');
      }

      return this.preimage.length;
    }

    /**
     * Validate this fulfillment.
     *
     * For a SHA256 hashlock fulfillment, successful parsing implies that the
     * fulfillment is valid, so this method is a no-op.
     *
     * @param {Buffer} Message (ignored in this condition type)
     * @return {Boolean} Validation result
     */

  }, {
    key: 'validate',
    value: function validate(message) {
      return true;
    }
  }]);

  return PreimageSha256;
}(BaseSha256);

PreimageSha256.TYPE_ID = 0;
PreimageSha256.TYPE_NAME = 'preimage-sha-256';
PreimageSha256.TYPE_ASN1_CONDITION = 'preimageSha256Condition';
PreimageSha256.TYPE_ASN1_FULFILLMENT = 'preimageSha256Fulfillment';
PreimageSha256.TYPE_CATEGORY = 'simple';

module.exports = PreimageSha256;