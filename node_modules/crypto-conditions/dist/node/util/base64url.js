'use strict';

/**
 * @module util
 */

/**
 * Utility class for encoding and decoding Base64Url.
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Base64Url = function () {
  function Base64Url() {
    _classCallCheck(this, Base64Url);
  }

  _createClass(Base64Url, null, [{
    key: 'decode',

    /**
     * Convert a base64url encoded string to a Buffer.
     *
     * @param {String} base64urlString base64url-encoded string
     * @return {Buffer} Decoded data.
     */
    value: function decode(base64urlString) {
      var base64String = base64urlString.replace(/-/g, '+').replace(/_/g, '/');
      return Buffer.from(base64String, 'base64');
    }

    /**
     * Encode a buffer as base64url.
     *
     * @param {Buffer} buffer Data to encode.
     * @return {String} base64url-encoded data.
     */

  }, {
    key: 'encode',
    value: function encode(buffer) {
      return buffer.toString('base64').replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
    }
  }]);

  return Base64Url;
}();

module.exports = Base64Url;