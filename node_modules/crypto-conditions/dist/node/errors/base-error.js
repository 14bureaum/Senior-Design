'use strict';

/**
 * @module util
 */

/**
 * Extensible error class.
 *
 * The built-in Error class is not actually a constructor, but a factory. It
 * doesn't operate on `this`, so if we call it as `super()` it doesn't do
 * anything useful.
 *
 * Nonetheless it does create objects that are instanceof Error. In order to
 * easily subclass error we need our own base class which mimics that behavior
 * but with a true constructor.
 *
 * Note that this code is specific to V8 (due to `Error.captureStackTrace`).
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseError = function (_Error) {
  _inherits(BaseError, _Error);

  function BaseError(message) {
    _classCallCheck(this, BaseError);

    // Set this.message
    var _this = _possibleConstructorReturn(this, (BaseError.__proto__ || Object.getPrototypeOf(BaseError)).call(this));

    Object.defineProperty(_this, 'message', {
      configurable: true,
      enumerable: false,
      value: message !== undefined ? String(message) : ''
    });

    // Set this.name
    Object.defineProperty(_this, 'name', {
      configurable: true,
      enumerable: false,
      value: _this.constructor.name
    });

    // Set this.stack
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, _this.constructor);
    }
    return _this;
  }

  return BaseError;
}(Error);

module.exports = BaseError;